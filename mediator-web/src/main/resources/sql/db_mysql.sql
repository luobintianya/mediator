CREATE DATABASE MEDIATOR DEFAULT CHARACTER SET UTF8;
/*渠道*/
DROP TABLE IF EXISTS CHANNEL;
CREATE TABLE CHANNEL(
    CHANNEL_ID INT(10) PRIMARY KEY AUTO_INCREMENT,  /*主键*/
    CODE VARCHAR(10) NOT NULL,              		/*代号*/
    NAME VARCHAR(20) NOT NULL,              		/*名称*/
    PRIORITY INT(10),                         		/*排序号*/
    STATUS INT(10),                          		/*状态*/
    CREATE_TIME DATETIME NOT NULL,          		/*创建时间*/
    UNIQUE KEY UK_CODE(CODE)
);
insert into channel (CHANNEL_ID, CODE, NAME, PRIORITY, STATUS, CREATE_TIME) values (1, 'TMALL', '天猫', 0, 1, CURRENT_TIMESTAMP);
insert into channel (CHANNEL_ID, CODE, NAME, PRIORITY, STATUS, CREATE_TIME) values (11, 'TAOBAO', '淘宝', 7, 1, CURRENT_TIMESTAMP);
insert into channel (CHANNEL_ID, CODE, NAME, PRIORITY, STATUS, CREATE_TIME) values (12, 'SYSTEM', '系统', 0, 1, CURRENT_TIMESTAMP);

/*应用*/
DROP TABLE IF EXISTS APPLICATION;
CREATE TABLE APPLICATION(
    APPLICATION_ID INT(10) PRIMARY KEY AUTO_INCREMENT,  /*主键*/
    NAME VARCHAR(20) NOT NULL,                          /*名称*/
    CODE VARCHAR(15) NOT NULL,				/*代号*/
    STORE_ID INT(10) NOT NULL,                          /* store id*/
    CHANNEL_ID INT(10) NOT NULL,                        /*渠道id*/
    CREATE_TIME DATETIME NOT NULL,                      /*创建时间*/
    APPKEY VARCHAR(50),
    APPSECRET VARCHAR(100),
    APPURL VARCHAR(200),
    SESSIONKEY VARCHAR(200),
    VENDOR_ID VARCHAR(20),
    VENDOR_NAME VARCHAR(20),
    NICK VARCHAR(100),
    PRIORITY INT(10),                                   /*排序号*/
    STATUS INT(10),                                     /*状态*/
    FIELD1 VARCHAR(200),                                /*预留扩展*/
    FIELD2 VARCHAR(100),                                /*预留扩展*/
    FIELD3 INT(10),                                     /*预留扩展*/
    FOREIGN KEY(CHANNEL_ID) REFERENCES CHANNEL(CHANNEL_ID),
    CONSTRAINT UK_CODE UNIQUE (CODE),
    CONSTRAINT UK_STORE_ID UNIQUE (STORE_ID)
);
insert into application (APPLICATION_ID, NAME, CODE, STORE_ID, CHANNEL_ID, CREATE_TIME, APPKEY, APPSECRET, APPURL, SESSIONKEY, VENDOR_ID, VENDOR_NAME, NICK, PRIORITY, STATUS, FIELD1, FIELD2, FIELD3) values (1, 'TestStore1', 'tm_gfqjd', 1007, 1, CURRENT_TIMESTAMP, '12201527www', '88652c5476edc325476973ac71645fcd111', 'http://gw.api.taobao.com/router/rest', '6101c281f591cb0168836643d8929be9588713b2ef9e215133006562', '', '呵呵', '陆静华3077011', 6, 1, null, null, null);
insert into application (APPLICATION_ID, NAME, CODE, STORE_ID, CHANNEL_ID, CREATE_TIME, APPKEY, APPSECRET, APPURL, SESSIONKEY, VENDOR_ID, VENDOR_NAME, NICK, PRIORITY, STATUS, FIELD1, FIELD2, FIELD3) values (3, 'bdtGroup1', 'tb_tmc', 1003, 11, CURRENT_TIMESTAMP, '12316299', '5fc8324f0b76fac2b284e80eab8fc331', 'http://gw.api.taobao.com/router/rest', '620112447bf44c3807191753b36cd965ZZcc7643faeb633728274110', '', '', '陆静华307701', 1, 1, null, null, null);
insert into application (APPLICATION_ID, NAME, CODE, STORE_ID, CHANNEL_ID, CREATE_TIME, APPKEY, APPSECRET, APPURL, SESSIONKEY, VENDOR_ID, VENDOR_NAME, NICK, PRIORITY, STATUS, FIELD1, FIELD2, FIELD3) values (15, '系统应用', 'SYSTEM', 0, 12, CURRENT_TIMESTAMP, '1012339797', 'sandboxf10b366ceb2a23b0955ab15d6', 'http://gw.api.tbsandbox.com/router/rest', '6201f28218b85c0c1086368dae6e676bb70bdf1cd2856273651882635', null, null, '系统', 0, 1, null, null, null);

/*task*/
DROP TABLE IF EXISTS TASK_TEMPLATE;
CREATE TABLE TASK_TEMPLATE(
    TEMPLATE_ID INT(10) PRIMARY KEY AUTO_INCREMENT,      /*主键*/
    DESCRIPTION VARCHAR(50),                             /*描述*/
    TYPE VARCHAR(15) NOT NULL,                           /*类型*/
    SUBTYPE VARCHAR(30) NOT NULL,                        /*子类型*/
    REPEATABLE INT(1),                                   /*是否可重复*/
    RERUN INT(1),                                        /*是否可重跑*/
    HUNG INT(1),                                         /*是否允许挂起*/
    PRIORITY INT(10),                                    /*排序号*/
    STATUS INT(10),                                      /*状态*/
    UNIQUE KEY UK_CODE(TYPE,SUBTYPE)
);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (1, '订单取消', 'ORDER', 'cancel', 0, 1, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (2, '创建订单', 'ORDER', 'create', 0, 1, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (3, '发货', 'ORDER', 'delivery', 1, 1, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (4, '订单列表', 'ORDER', 'list', 1, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (5, '订单部分成功', 'ORDER', 'partlySuccess', 0, 1, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (6, '订单收货地址修改', 'ORDER', 'receiveAddressUpdate', 1, 1, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (7, '订单重新发货,更新物流信息', 'ORDER', 'reDelivery', 1, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (8, '订单卖家备注修改', 'ORDER', 'sellerMemoModify', 1, 1, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (9, '预售订单付定金', 'ORDER', 'stepPay', 0, 1, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (10, '订单成功', 'ORDER', 'success', 0, 1, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (11, '订单数据同步列表', 'ORDER', 'syncList', 1, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (12, '订单数据同步', 'ORDER', 'sync', 1, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (13, '淘宝/天猫渠道商品下架', 'PRODUCT', 'productChannelOffShelf', 1, 0, 0, 0, 0);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (14, '商品创建', 'PRODUCT', 'create', 1, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (15, '获取用户下的所有运费模板', 'PRODUCT', 'deliveryTemplatesGet', 1, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (16, '更新库存', 'PRODUCT', 'productInventoryUpdate', 1, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (17, '库存同步包装', 'PRODUCT', 'productInventoryUpdateWrapper', 0, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (18, '商品下架', 'PRODUCT', 'offShelf', 1, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (19, '商品下架包装task', 'PRODUCT', 'offShelfWrapper', 0, 0, 0, 3, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (20, '商品上架task', 'PRODUCT', 'onShelf', 1, 0, 0, 3, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (21, '商品上架包装task', 'PRODUCT', 'onShelfWrapper', 0, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (22, '商品、sku价格更新task', 'PRODUCT', 'priceUpdate', 1, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (23, '商品更新task', 'PRODUCT', 'update', 1, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (24, '单个sku库存同步', 'PRODUCT', 'skuInventoryUpdate', 1, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (25, 'sku库存同步包装
', 'PRODUCT', 'skuInventoryUpdateWrapper', 0, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (26, '买家退货,上传物流信息.', 'REFUND', 'buyerReturnGoods', 0, 1, 0, 10, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (27, '退款关闭', 'REFUND', 'close', 0, 1, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (28, '退款创建task', 'REFUND', 'create', 0, 1, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (29, '抓取退款列表task', 'REFUND', 'list', 0, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (30, '卖家同意退款', 'REFUND', 'sellerAgree', 0, 1, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (31, '卖家拒绝退款申请', 'REFUND', 'sellerRefuse', 0, 1, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (32, '退款成功', 'REFUND', 'success', 0, 1, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (33, '退款修改task', 'REFUND', 'update', 1, 1, 0, 3, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (34, '清理缓存', 'SYSTEM', 'cacheClean', 0, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (35, '暂停服务', 'SYSTEM', 'pauseService', 0, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (36, '恢复服务 目前仅包括恢复抓单', 'SYSTEM', 'recoveryService', 0, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (37, '扫尾task', 'SYSTEM', 'saowei', 0, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (38, '恢复抓单', 'SYSTEM', 'startGetOrder', 0, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (39, '停止抓单,主要是停止task最终发送消息,task还是会创建,只是状态为TASK_STATUS_HA', 'SYSTEM', 'stopGetOrder', 0, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (40, '订单部分发货', 'ORDER', 'partlySellerShip', 0, 1, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (41, '商品属性获取', 'PRODUCT', 'propertyGet', 1, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (42, '手工抓单', 'ORDER', 'reCreate', 1, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (43, '退货创建', 'RETURN', 'create', 0, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (44, '退货列表', 'RETURN', 'list', 0, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (45, '订单补单', 'ORDER', 'supplement', 1, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (46, '抓取商品映射数据', 'PRODUCT', 'mappingList', 1, 0, 0, 1, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (47, '处理商品映射数据', 'PRODUCT', 'mapping', 1, 1, 1, 1, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (48, '抓取所有类目', 'PRODUCT', 'categoryGet', 0, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (49, '退款补单', 'REFUND', 'refundsupplement', 1, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (50, '征集预售列表', 'ORDER', 'zhengjilist', 1, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (51, '抓取征集订单', 'ORDER', 'zhengjisupplement', 1, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (52, '淘宝/天猫渠道商品上架', 'PRODUCT', 'productChannelUpShelf', 1, 1, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (53, 'AG取消发货', 'REFUND', 'SendGoodsCancel', 1, 1, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (54, 'AG退货入仓状态', 'REFUND', 'WarehouseUpdate', 1, 1, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (55, '订单全链路,通知门店配货', 'ORDER', 'allocationnotified', 0, 0, 0, 1, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (56, '订单全链路,门店已接单', 'ORDER', 'shopallocation', 0, 0, 0, 1, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (57, '订单全链路,门店已发货', 'ORDER', 'shophandled', 0, 0, 0, 1, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (58, '全渠道绑定商品', 'PRODUCT', 'itemStoreBanding', 1, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (59, '卖家同意换货申请', 'EXCHANGE', 'Agree', 1, 1, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (60, '通知平台换货发货', 'EXCHANGE', 'Consigngoods', 1, 1, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (61, '换货详情', 'EXCHANGE', 'Info', 0, 1, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (62, '换货列表', 'EXCHANGE', 'list', 1, 0, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (63, '卖家拒绝换货申请', 'EXCHANGE', 'Refuse', 1, 1, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (64, '卖家确认收货', 'EXCHANGE', 'ReturngoodsAgree', 1, 1, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (65, '卖家拒绝确认收货', 'EXCHANGE', 'ReturngoodsRefuse', 1, 1, 0, 0, 1);
INSERT INTO task_template (TEMPLATE_ID, DESCRIPTION, TYPE, SUBTYPE, REPEATABLE, RERUN, HUNG, PRIORITY, STATUS) VALUES (66, '门店的库存进行初始化', 'PRODUCT', 'storeInventoryItemInitial', 1, 0, 1, 0, 1);


DROP TABLE IF EXISTS TASK;
CREATE TABLE TASK(
    TASK_ID BIGINT(10) PRIMARY KEY AUTO_INCREMENT,                     /*主键*/
    TEMPLATE_ID INT(10),                                            /*模板id*/
    DATAID VARCHAR(100) NOT NULL,            
    `DATA` TEXT(7000),                                              /*json格式数据*/
    STARTTIME DATETIME NOT NULL,                                    /*开始时间*/
    ENDTIME DATETIME,                                               /*结束时间*/
    CHANNEL_ID INT(10) NOT NULL,                                    /*渠道编号*/
    APPLICATION_ID INT(10) NOT NULL,                                /*店铺*/
    STATUS INT(10) NOT NULL,                                        /*状态*/
    ERRORMESSAGE VARCHAR(200),                                      /*错误码*/
    FOREIGN KEY(CHANNEL_ID) REFERENCES CHANNEL(CHANNEL_ID) ON DELETE CASCADE,
    FOREIGN KEY(TEMPLATE_ID) REFERENCES TASK_TEMPLATE(TEMPLATE_ID) ON DELETE CASCADE,
    FOREIGN KEY(APPLICATION_ID) REFERENCES APPLICATION (APPLICATION_ID) ON DELETE CASCADE
);
ALTER TABLE TASK ADD INDEX TASK_DATAID (DATAID);
ALTER TABLE TASK ADD INDEX TASK_STATUS (STATUS);

/*调度*/
DROP TABLE IF EXISTS CRON_CONFIG;
CREATE TABLE CRON_CONFIG(
    CRON_ID INT(10) PRIMARY KEY AUTO_INCREMENT,               /*主键*/
    DESCRIPTION VARCHAR(50),                                  /*描述*/
    CLASS_NAME VARCHAR(200) NOT NULL,                         /*类名*/
    EXPRESSION VARCHAR(50) NOT NULL,                          /*cron表达式*/
    IS_GLOBAL INT(1) NOT NULL,                                /*是否全局*/
    STATUS INT(1) NOT NULL                                    /*状态*/
    --CHANNEL_ID INT(10) NOT NULL,                            /*渠道编号*/
    --APPLICATION_ID INT(10) NOT NULL                         /*店铺*/
    --FOREIGN KEY(CHANNEL_ID) REFERENCES CHANNEL(CHANNEL_ID),
    --FOREIGN KEY(APPLICATION_ID) REFERENCES APPLICATION (APPLICATION_ID)
);

DROP TABLE IF EXISTS CRON_PARAM;
CREATE TABLE CRON_PARAM(
    PARAM_ID INT(10) PRIMARY KEY AUTO_INCREMENT,    /*主键*/
    CRON_ID INT(10) NOT NULL,            
    PARAM_NAME VARCHAR(20) NOT NULL,                /*参数名*/
    PARAM_VALUE VARCHAR(50) NOT NULL,               /*参数值*/
    FOREIGN KEY(CRON_ID) REFERENCES CRON_CONFIG(CRON_ID) ON DELETE CASCADE
);
--cron data
insert into cron_config (CRON_ID, DESCRIPTION, CLASS_NAME, EXPRESSION, IS_GLOBAL, STATUS) values (1, '淘宝订单批量抓取', 'net.chinacloud.mediator.job.order.OrderJob', '0 42/30 * * * ?', 1, 1);
insert into cron_config (CRON_ID, DESCRIPTION, CLASS_NAME, EXPRESSION, IS_GLOBAL, STATUS) values (2, '天猫订单批量抓取', 'net.chinacloud.mediator.job.order.OrderJob', '0 41/30 * * * ?', 1, 1);
insert into cron_config (CRON_ID, DESCRIPTION, CLASS_NAME, EXPRESSION, IS_GLOBAL, STATUS) values (3, '扫尾', 'net.chinacloud.mediator.job.system.SaoweiJob', '0 7/30 * * * ?', 1, 1);
insert into cron_config (CRON_ID, DESCRIPTION, CLASS_NAME, EXPRESSION, IS_GLOBAL, STATUS) values (6, '业务失败task扫尾', 'net.chinacloud.mediator.job.system.FailureTaskProcessJob', '0 5/30 * * * ?', 1, 1);
insert into cron_config (CRON_ID, DESCRIPTION, CLASS_NAME, EXPRESSION, IS_GLOBAL, STATUS) values (7, '天猫数据同步', 'net.chinacloud.mediator.taobao.job.OrderSyncJob', '0 1/10 * * * ?', 1, 0);
insert into cron_config (CRON_ID, DESCRIPTION, CLASS_NAME, EXPRESSION, IS_GLOBAL, STATUS) values (8, '淘宝数据同步', 'net.chinacloud.mediator.taobao.job.OrderSyncJob', '0 3/10 * * * ?', 1, 0);
insert into cron_config (CRON_ID, DESCRIPTION, CLASS_NAME, EXPRESSION, IS_GLOBAL, STATUS) values (9, '淘宝补单(前一天)', 'net.chinacloud.mediator.job.order.OrderSupplementJob', '0 15 0 * * ?', 1, 1);
insert into cron_config (CRON_ID, DESCRIPTION, CLASS_NAME, EXPRESSION, IS_GLOBAL, STATUS) values (10, '天猫补单(前一天)', 'net.chinacloud.mediator.job.order.OrderSupplementJob', '0 17 0 * * ?', 1, 1);
insert into cron_config (CRON_ID, DESCRIPTION, CLASS_NAME, EXPRESSION, IS_GLOBAL, STATUS) values (13, '淘宝商品映射', 'net.chinacloud.mediator.job.product.MappingJob', '0 0 22 * * ?', 1, 1);
insert into cron_config (CRON_ID, DESCRIPTION, CLASS_NAME, EXPRESSION, IS_GLOBAL, STATUS) values (14, '天猫商品映射', 'net.chinacloud.mediator.job.product.MappingJob', '0 25 17 * * ?', 1, 1);
insert into cron_config (CRON_ID, DESCRIPTION, CLASS_NAME, EXPRESSION, IS_GLOBAL, STATUS) values (20, '退款补单', 'net.chinacloud.mediator.taobao.job.RefundSupplementJob', '0 1/60 * * * ?', 1, 1);

insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (214, 6, 'CHANNEL_ID', '12');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (215, 6, 'APPLICATION_ID', '15');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (313, 7, 'CHANNEL_ID', '1');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (314, 7, 'APPLICATION_ID', '1');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (315, 8, 'CHANNEL_ID', '11');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (316, 8, 'APPLICATION_ID', '3');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (388, 14, 'CHANNEL_ID', '1');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (389, 14, 'APPLICATION_ID', '1');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (413, 10, 'CHANNEL_ID', '1');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (414, 10, 'APPLICATION_ID', '1');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (415, 10, 'STATUS', 'WAIT_SELLER_SEND_GOODS');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (416, 10, 'USE_DB_TIME', 'false');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (425, 13, 'CHANNEL_ID', '11');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (426, 13, 'APPLICATION_ID', '3');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (445, 3, 'CHANNEL_ID', '11');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (446, 3, 'APPLICATION_ID', '3');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (447, 3, 'TASK_RERUN_DELAY', '86400');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (452, 1, 'CHANNEL_ID', '11');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (453, 1, 'APPLICATION_ID', '3');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (454, 1, 'STATUS', 'WAIT_SELLER_SEND_GOODS');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (455, 2, 'CHANNEL_ID', '1');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (456, 2, 'APPLICATION_ID', '1');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (457, 2, 'STATUS', 'WAIT_SELLER_SEND_GOODS');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (475, 20, 'CHANNEL_ID', '11');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (476, 20, 'APPLICATION_ID', '3');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (477, 20, 'STATUS', 'WAIT_SELLER_AGREE,SUCCESS,CLOSED');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (478, 20, 'USE_DB_TIME', 'true');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (479, 9, 'CHANNEL_ID', '11');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (480, 9, 'APPLICATION_ID', '3');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (481, 9, 'STATUS', 'WAIT_SELLER_SEND_GOODS');
insert into cron_param (PARAM_ID, CRON_ID, PARAM_NAME, PARAM_VALUE) values (482, 9, 'USE_DB_TIME', 'false');

DROP TABLE IF EXISTS CRON_LASTTIME;
CREATE TABLE CRON_LASTTIME(
    APPLICATION_ID INT DEFAULT '0' NOT NULL,    --应用id
    TEMPLATE_ID INT DEFAULT '0' NOT NULL,       --模板id
    LASTTIME BIGINT DEFAULT '0',                --上次运行时间
    PRIMARY KEY (APPLICATION_ID, TEMPLATE_ID)
);

--add 2015-06-27 商品上传相关表定义
DROP TABLE IF EXISTS CATEGORY_MAPPING;
--渠道类目映射表
CREATE TABLE CATEGORY_MAPPING(
    MAPPING_ID INT(10) NOT NULL AUTO_INCREMENT, --主键
    CHANNEL_CAT_ID BIGINT NOT NULL,     --渠道叶子类目id
    CHANNEL_CAT_NAME VARCHAR(40),       --渠道叶子类目名称
    CAT_ID BIGINT NOT NULL,     --系统叶子类目id
    CAT_NAME VARCHAR(30),       --系统叶子类目名称
    APPLICATION_ID INT(10) NOT NULL,    --所属应用
    PRIMARY KEY (MAPPING_ID),       --主键
    FOREIGN KEY(APPLICATION_ID) REFERENCES APPLICATION(APPLICATION_ID) ON DELETE CASCADE
);
ALTER TABLE CATEGORY_MAPPING ADD CONSTRAINT UNIQUE_CATEGORY_MAPPING UNIQUE (CAT_ID, APPLICATION_ID);

DROP TABLE IF EXISTS TMALL_PRODUCTCAT_MAPPING;
--天猫产品类目关联表
CREATE TABLE TMALL_PRODUCTCAT_MAPPING(
     MAPPING_ID INT(10) NOT NULL AUTO_INCREMENT, --主键
     CHANNEL_CAT_ID BIGINT NOT NULL,     --渠道叶子类目id
     PRODUCT_ID BIGINT(20) NOT NULL,   --天猫产品id
     APPLICATION_ID INT(10) NOT NULL,    --所属应用
     PRIMARY KEY (MAPPING_ID),       --主键
     FOREIGN KEY(APPLICATION_ID) REFERENCES APPLICATION(APPLICATION_ID) ON DELETE CASCADE
);

--属性映射表
CREATE TABLE ATTRIBUTE_MAPPING(
    CID INT(20) NOT NULL,	--平台(天猫等)类目id
    CHANNELKEY VARCHAR(100) NOT NULL,
    OMSKEY VARCHAR(100) NOT NULL,
    CONSTRAINT UNIQUE_ATTRIBUTE_MAPPING UNIQUE (CHANNELKEY)
);

DROP TABLE IF EXISTS PRODUCT_PARTNUMBER_MAPPING;
--渠道商品id与外部商家编码映射表
CREATE TABLE PRODUCT_PARTNUMBER_MAPPING(
    MAPPING_ID INT(10) NOT NULL AUTO_INCREMENT, --主键
    CHANNEL_PRODUCT_ID VARCHAR(20) NOT NULL,	--渠道商品id
    OUTER_ID VARCHAR(20) NOT NULL,		--外部商家编码
    TYPE TINYINT(1) NOT NULL,			--类型,0:product,1:sku
    APPLICATION_ID INT(10) NOT NULL,    --所属应用
    PRIMARY KEY (MAPPING_ID),       --主键
    FOREIGN KEY(APPLICATION_ID) REFERENCES APPLICATION(APPLICATION_ID) ON DELETE CASCADE
);
ALTER TABLE PRODUCT_PARTNUMBER_MAPPING ADD CONSTRAINT UNIQUE_PRODUCT_PARTNUMBER_MAPPING UNIQUE (OUTER_ID, APPLICATION_ID);

/*DROP TABLE IF EXISTS TMALL_CHANNEL_ATTR_MAPPING;
--天猫渠道属性映射表
CREATE TABLE TMALL_CHANNEL_ATTR_MAPPING(
    MAPPING_ID INT(10) NOT NULL AUTO_INCREMENT, --主键
    CHANNEL_CAT_ID BIGINT NOT NULL,     --渠道叶子类目id
    CHANNEL_ATTR_ID VARCHAR(20) NOT NULL,   --渠道属性id
    CHANNEL_ATTR_NAME VARCHAR(30),      --渠道属性名称
    ATTR_CODE VARCHAR(20) NOT NULL,     --系统属性编号
    DEFAULT_VALUE VARCHAR(30),      --默认值
    APPLICATION_ID INT(10) NOT NULL,    --所属应用
    PRIMARY KEY (MAPPING_ID),       --主键
    FOREIGN KEY(APPLICATION_ID) REFERENCES APPLICATION(APPLICATION_ID) ON DELETE CASCADE
);
ALTER TABLE TMALL_CHANNEL_ATTR_MAPPING ADD CONSTRAINT UNIQUE_TMALL_CHANNEL_ATTR_MAPPING UNIQUE (CHANNEL_CAT_ID, ATTR_CODE, APPLICATION_ID);*/

/*DROP TABLE IF EXISTS CHANNEL_ATTRVAL_MAPPING;
--渠道属性值映射表
CREATE TABLE CHANNEL_ATTRVAL_MAPPING(
    MAPPING_ID INT(10) NOT NULL AUTO_INCREMENT, --主键
    CHANNEL_CAT_ID BIGINT NOT NULL,     --渠道叶子类目id
    CHANNEL_ATTR_ID VARCHAR(20) NOT NULL,   --渠道属性id
    CHANNEL_ATTRVAL_ID VARCHAR(20) NOT NULL,    --渠道属性值id
    CHANNEL_ATTRVAL VARCHAR(30) NOT NULL,        --渠道属性值
    ATTR_CODE VARCHAR(20) NOT NULL,     --系统属性编号
    ATTRVAL_CODE VARCHAR(20) NOT NULL,     --系统属性值编号
    ATTRVAL VARCHAR(30) NOT NULL,        --系统属性值
    APPLICATION_ID INT(10) NOT NULL,    --所属应用
    PRIMARY KEY (MAPPING_ID),       --主键
    FOREIGN KEY(APPLICATION_ID) REFERENCES APPLICATION(APPLICATION_ID) ON DELETE CASCADE
);
ALTER TABLE CHANNEL_ATTRVAL_MAPPING ADD CONSTRAINT UNIQUE_CHANNEL_ATTRVAL_MAPPING UNIQUE (CHANNEL_CAT_ID, CHANNEL_ATTR_ID, ATTRVAL, APPLICATION_ID);*/

/*DROP TABLE IF EXISTS JD_CHANNEL_ATTR_MAPPING;
--京东渠道属性映射表
CREATE TABLE JD_CHANNEL_ATTR_MAPPING(
    MAPPING_ID INT(10) NOT NULL AUTO_INCREMENT, --主键
    CHANNEL_CAT_ID BIGINT NOT NULL,     --渠道叶子类目id
    CHANNEL_ATTR_ID VARCHAR(20) NOT NULL,   --渠道属性id
    CHANNEL_ATTR_NAME VARCHAR(30),      --渠道属性名称
    ATTR_CODE VARCHAR(20) NOT NULL,     --系统属性编号
    DEFAULT_VALUE VARCHAR(30),      --默认值
    ATTR_TYPE TINYINT(1) NOT NULL,  --属性类型
    INPUT_TYPE TINYINT(1) NOT NULL,     --输入类型
    KEYPROP TINYINT(1) NOT NULL,    --是否关键属性
    SALEPROP TINYINT(1) NOT NULL,   --是否销售属性
    COLORPROP TINYINT(1),   --是否颜色属性
    SIZEPROP TINYINT(1),    --是否尺码属性
    REQUIRED TINYINT(1) NOT NULL,   --是否必填属性
    APPLICATION_ID INT(10) NOT NULL,    --所属应用
    STATUS TINYINT(1) NOT NULL DEFAULT 1,   --状态,1:可用,0:不可用
    PRIMARY KEY (MAPPING_ID),       --主键
    FOREIGN KEY(APPLICATION_ID) REFERENCES APPLICATION(APPLICATION_ID) ON DELETE CASCADE
);
ALTER TABLE JD_CHANNEL_ATTR_MAPPING ADD CONSTRAINT UNIQUE_JD_CHANNEL_ATTR_MAPPING UNIQUE (CHANNEL_CAT_ID, ATTR_CODE, APPLICATION_ID);*/

/*DROP TABLE IF EXISTS TB_CHANNEL_ATTR_MAPPING;
--淘宝渠道属性映射表
CREATE TABLE TB_CHANNEL_ATTR_MAPPING(
    MAPPING_ID INT(10) NOT NULL AUTO_INCREMENT, --主键
    CHANNEL_CAT_ID BIGINT NOT NULL,     --渠道叶子类目id
    CHANNEL_ATTR_ID VARCHAR(20) NOT NULL,   --渠道属性id
    CHANNEL_ATTR_NAME VARCHAR(30),      --渠道属性名称
    ATTR_CODE VARCHAR(20) NOT NULL,     --系统属性编号
    DEFAULT_VALUE VARCHAR(30),      --默认值
    KEYPROP TINYINT(1) NOT NULL,    --是否关键属性
    SALEPROP TINYINT(1) NOT NULL,   --是否销售属性
    COLORPROP TINYINT(1),   --是否颜色属性
    ENUMPROP TINYINT(1),    --是否可枚举属性
    ITEMPROP TINYINT(1),    --是否商品属性
    MUST TINYINT(1) NOT NULL,    --发布产品或商品时是否为必选属性
    MULTI TINYINT(1),   --发布产品或商品时是否可以多选
    STATUS TINYINT(1) NOT NULL DEFAULT 1,   --状态,1:可用,0:不可用
    INPUTPROP TINYINT(1) NOT NULL,   --在is_enum_prop是true的前提下，是否是卖家可以自行输入的属性
    ATTR_TYPE TINYINT(1) NOT NULL,  --属性值类型
    REQUIRED TINYINT(1) NOT NULL,   --是否必填属性
    APPLICATION_ID INT(10) NOT NULL,    --所属应用
    PRIMARY KEY (MAPPING_ID),
    FOREIGN KEY(APPLICATION_ID) REFERENCES APPLICATION(APPLICATION_ID) ON DELETE CASCADE
);
ALTER TABLE TB_CHANNEL_ATTR_MAPPING ADD CONSTRAINT UNIQUE_TB_CHANNEL_ATTR_MAPPING UNIQUE (CHANNEL_CAT_ID, ATTR_CODE, APPLICATION_ID);*/

--错误消息临时表
DROP TABLE IF EXISTS TASK_FAILURE_MSG;
CREATE TABLE TASK_FAILURE_MSG (
    TASK_ID BIGINT(10) NOT NULL PRIMARY KEY,
    CODE VARCHAR(200) DEFAULT NULL,
    CREATETIME DATETIME NOT NULL,
    LASTUPDATE DATETIME DEFAULT NULL,
    STATUS INT(10) NOT NULL,
    FOREIGN KEY(TASK_ID) REFERENCES TASK(TASK_ID) ON DELETE CASCADE
);

--淘宝/天猫订单数据同步临时表
/*DROP TABLE IF EXISTS JDP_TB_TRADE_TEMP;
CREATE TABLE JDP_TB_TRADE_TEMP (
  ID INT PRIMARY KEY AUTO_INCREMENT,
  TID BIGINT(20) NOT NULL,
  STATUS VARCHAR(64),
  SELLER_NICK VARCHAR(32) DEFAULT NULL,
  JDP_MODIFIED DATETIME DEFAULT NULL,
  FLAG INT DEFAULT 0,
  KEY `ind_jdp_tb_trade_seller_nick_jdp_modified` (`seller_nick`,`jdp_modified`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;*/

--商品图片
DROP TABLE IF EXISTS PRODUCT_IMAGE;
CREATE TABLE PRODUCT_IMAGE(
    ID INT(10) NOT NULL AUTO_INCREMENT,
    CHANNEL_PRODUCT_ID VARCHAR(20) NOT NULL,
    IMAGE_ID VARCHAR(20) NOT NULL,
    SORT INT,
    APPLICATION_ID INT(10) NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (APPLICATION_ID) REFERENCES application (APPLICATION_ID) ON DELETE
    CASCADE,
    INDEX APPLICATION_ID (APPLICATION_ID)
);

--注册表
CREATE TABLE registrydata(
    REGISTRY_KEY VARCHAR(50) NOT NULL,
    REGISTRY_VALUE VARCHAR(256) NOT NULL,
    REGISTRY_DESCRIPTION VARCHAR(100) NOT NULL,
    PRIMARY KEY (REGISTRY_KEY)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
insert into registrydata (REGISTRY_KEY, REGISTRY_VALUE, REGISTRY_DESCRIPTION) values ('brandKey', '20000', '淘宝品牌key');
insert into registrydata (REGISTRY_KEY, REGISTRY_VALUE, REGISTRY_DESCRIPTION) values ('brandPVid', '20000:107354073', '天猫品牌pid、vid');
insert into registrydata (REGISTRY_KEY, REGISTRY_VALUE, REGISTRY_DESCRIPTION) values ('brandValue', '107354073', '淘宝品牌value');
insert into registrydata (REGISTRY_KEY, REGISTRY_VALUE, REGISTRY_DESCRIPTION) values ('excludeFieldIds', 'prop_extend_1627207,seller_cids', '天猫排除的属性id');
insert into registrydata (REGISTRY_KEY, REGISTRY_VALUE, REGISTRY_DESCRIPTION) values ('includeFieldIds', 'in_prop_1627207,sku,std_size_prop_20509_-1,size_measure_image,sku_MarketTime,item_size_weight,item_size,item_weight,prop_141750102,prop_148158672,prop_20509,prop_1627207,prop_8560225,in_prop_148242406,prop_20021,std_size_prop_20518_-1,prop_21433', '天猫需要的属性 id');
insert into registrydata (REGISTRY_KEY, REGISTRY_VALUE, REGISTRY_DESCRIPTION) values ('jdpScheduleEndTimeIncrement', '300', 'jdp调度时间增量,单位:s');
insert into registrydata (REGISTRY_KEY, REGISTRY_VALUE, REGISTRY_DESCRIPTION) values ('jdpScheduleEndTimeModify', 'false', 'jdp调度截止时间是否启用增量时间');
insert into registrydata (REGISTRY_KEY, REGISTRY_VALUE, REGISTRY_DESCRIPTION) values ('mailFrom', 'ywu@wuxicloud.com', '发件人邮箱');
insert into registrydata (REGISTRY_KEY, REGISTRY_VALUE, REGISTRY_DESCRIPTION) values ('mailToList', 'huangxitao@wuxicloud.com', '收件人');
insert into registrydata (REGISTRY_KEY, REGISTRY_VALUE, REGISTRY_DESCRIPTION) values ('sendMail', 'false', '是否要发邮件');
insert into registrydata (REGISTRY_KEY, REGISTRY_VALUE, REGISTRY_DESCRIPTION) values ('SPECIAL_STR_LIST', '&apos;,&quot;', '天猫淘宝特殊字符过滤');
insert into registrydata (REGISTRY_KEY, REGISTRY_VALUE, REGISTRY_DESCRIPTION) values ('taobaoSizeProperty', '20509', '淘宝尺码属性id');
insert into registrydata (REGISTRY_KEY, REGISTRY_VALUE, REGISTRY_DESCRIPTION) values ('tmallColorProperty', 'in_prop_1627207,prop_1627207', '天猫颜色属性');
insert into registrydata (REGISTRY_KEY, REGISTRY_VALUE, REGISTRY_DESCRIPTION) values ('tmallSizeProperty', 'std_size_prop_20509_-1,prop_20509,in_prop_148242406,std_size_prop_20518_-1,prop_21433', '天猫尺码属性');
insert into registrydata (REGISTRY_KEY, REGISTRY_VALUE, REGISTRY_DESCRIPTION) values ('taobao_include_cat', '30,50008165,50011740,16,50006843,50006842,50010404,50023724,122650005', '淘宝使用的目录');
--insert into registrydata (REGISTRY_KEY, REGISTRY_VALUE, REGISTRY_DESCRIPTION) values ('processShelfStatus', 'y', '是否处理上下架状态');

INSERT INTO registrydata (REGISTRY_KEY, REGISTRY_VALUE, REGISTRY_DESCRIPTION) VALUES ('endtime_exchange_hour', '0', '结束时间往(负数)前推多少小时，0表示结束时间为当前时间，正数是往后退');
INSERT INTO registrydata (REGISTRY_KEY, REGISTRY_VALUE, REGISTRY_DESCRIPTION) VALUES ('endtime_order_hour', '0', '结束时间往(负数)前推多少小时，0表示结束时间为当前时间，正数是往后退');
INSERT INTO registrydata (REGISTRY_KEY, REGISTRY_VALUE, REGISTRY_DESCRIPTION) VALUES ('isResponseUpdateSkuInventory', 'N', '是否回复库存更新结果');

--------------------------------------------------------
--系统登录用户
CREATE TABLE SYS_USER
(
	ID INT NOT NULL AUTO_INCREMENT,
	USERNAME VARCHAR(50) NOT NULL,
	PASSWORD VARCHAR(50) NOT NULL,
	EMAIL VARCHAR(50),
	SALT VARCHAR(10),
	CREATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	LASTUPDATE TIMESTAMP DEFAULT '0000-00-00 00:00:00',
	ADMIN TINYINT(1) DEFAULT '1',
	DELETED INT DEFAULT '0',
	PRIMARY KEY (ID)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
insert into sys_user (ID, USERNAME, PASSWORD, EMAIL, SALT, CREATETIME, LASTUPDATE, ADMIN, DELETED) values (2, 'admin', '36E7F71165E2FB7BAB3DE0FC380BADBB', 'ywu@wuxicloud.com', 'WefayGPzFY', '2015-08-19 19:41:51', '2015-08-19 19:41:51', '1', 0);
insert into sys_user (ID, USERNAME, PASSWORD, EMAIL, SALT, CREATETIME, LASTUPDATE, ADMIN, DELETED) values (3, 'test1', 'E358A48126754B316D957AC5861E6BCE', 'test1@wuxicloud.com', 'XiMnDPDzPl', '2015-08-20 16:06:14', '2015-08-20 16:06:14', '1', 0);

--角色
CREATE TABLE SYS_ROLE(
    ID INTEGER PRIMARY KEY AUTO_INCREMENT,
    NAME VARCHAR(30) NOT NULL,
    IDENTIFIER VARCHAR(10) NOT NULL,
    DESCRIPTION VARCHAR(50)
);
insert into sys_role (ID, NAME, IDENTIFIER, DESCRIPTION) values (1, '系统管理员', 'admin', '系统管理员');
insert into sys_role (ID, NAME, IDENTIFIER, DESCRIPTION) values (2, '普通用户', 'common', '普通用户');

--用户、角色关联表
CREATE TABLE SYS_USER_ROLE(
    ID INTEGER PRIMARY KEY AUTO_INCREMENT,
    USER_ID INTEGER NOT NULL,
    ROLE_ID INTEGER NOT NULL,
    FOREIGN KEY(USER_ID) REFERENCES SYS_USER (ID) ON DELETE CASCADE,
    FOREIGN KEY(ROLE_ID) REFERENCES SYS_ROLE (ID) ON DELETE CASCADE
);
insert into sys_user_role (ID, USER_ID, ROLE_ID) values (1, 2, 1);
insert into sys_user_role (ID, USER_ID, ROLE_ID) values (2, 3, 2);

--更新库存日志
CREATE TABLE INVENTORY_UPDATE_REMARK
    (
        ID INT(10) NOT NULL AUTO_INCREMENT,
        OUTER_SKU_ID VARCHAR(30) NOT NULL,--商家编码
        STOCKNUMBER int(10),--库存
        ISFULL TINYINT(1) NOT NULL,--是否全量
        MODIFYTIME VARCHAR(30),--修改时间
        APPLICATIONID INT(10) NOT NULL,--应用id
        PRIMARY KEY (id),
        FOREIGN KEY (APPLICATIONID) REFERENCES `application` (`APPLICATION_ID`) ON
        DELETE
        CASCADE,
        INDEX INDEX_SKU_PARTNUMBER_MAPPING (OUTER_SKU_ID,APPLICATIONID),
         CONSTRAINT UNIQUE_INVENTORY_UPDATE_REMARK UNIQUE (OUTER_SKU_ID, APPLICATIONID)
    );
    
    
    INSERT INTO registrydata (REGISTRY_KEY, REGISTRY_VALUE, REGISTRY_DESCRIPTION) VALUES ('isToInventoryUpdateInterface', 'N', '是否不管限制条件，直接去调库存更新接口');
    
